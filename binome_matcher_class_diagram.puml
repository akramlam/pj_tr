@startuml Binome Matcher Class Diagram

!define ENTITY(x) class x << (E,#FFAAAA) Entity >>
!define SERVICE(x) class x << (S,#AAFFAA) Service >>
!define CONTROLLER(x) class x << (C,#AAAAFF) Controller >>
!define REPOSITORY(x) class x << (R,#FFFF99) Repository >>
!define SECURITY(x) class x << (X,#FFD700) Security >>
!define ANDROID(x) class x << (A,#DDA0DD) Android >>

' Core Domain Entities
package "Core Domain" {
    ENTITY(User) {
        - id: Long
        - username: String
        - email: String
        - password: String
        - roles: Set<String>
    }
    
    ENTITY(Profile) {
        - id: Long
        - user: User
        - formation: String
        - skills: Set<String>
        - preferences: String
    }
    
    ENTITY(Message) {
        - id: Long
        - sender: User
        - recipient: User
        - content: String
        - timestamp: Instant
    }
    
    ENTITY(DebugLog) {
        - id: Long
        - timestamp: Instant
        - message: String
        - level: String
    }
}

' API Layer
package "API Layer" {
    ' Controllers
    CONTROLLER(AuthController) {
        + register(RegisterRequest): AuthResponse
        + login(LoginRequest): AuthResponse
    }
    
    CONTROLLER(ProfileController) {
        + createProfile(ProfileRequest): Profile
        + getProfile(userId): Profile
        + updateProfile(userId, ProfileRequest): Profile
    }
    
    CONTROLLER(MessageController) {
        + sendMessage(MessageRequest): Message
        + getConversation(userId): List<Message>
        + getMessages(): List<Message>
    }
    
    CONTROLLER(MatchController) {
        + findMatches(userId): List<User>
        + getRecommendations(userId): List<User>
    }
    
    ' Services
    SERVICE(AuthenticationService) {
        + register(username, email, password): String
        + login(username, password): String
    }
    
    SERVICE(ProfileService) {
        + createProfile(userId, ProfileDto): Profile
        + updateProfile(profileId, ProfileDto): Profile
        + getProfile(userId): Profile
    }
    
    SERVICE(MessageService) {
        + sendMessage(senderId, recipientId, content): Message
        + getConversation(user1Id, user2Id): List<Message>
        + getUserMessages(userId): List<Message>
    }
    
    SERVICE(MatchService) {
        + findMatches(userId): List<User>
        + calculateCompatibility(user1, user2): Double
        + getRecommendations(userId): List<User>
    }
    
    ' Repositories
    REPOSITORY(UserRepository) {
        + findByUsername(username): Optional<User>
        + findByEmail(email): Optional<User>
        + existsByUsername(username): boolean
        + existsByEmail(email): boolean
    }
    
    REPOSITORY(ProfileRepository) {
        + findByUserId(userId): Optional<Profile>
    }
    
    REPOSITORY(MessageRepository) {
        + findBySenderIdAndRecipientId(senderId, recipientId): List<Message>
        + findByUserId(userId): List<Message>
    }
}

' Security Layer
package "Security" {
    SECURITY(SecurityConfig) {
        + passwordEncoder(): PasswordEncoder
        + authenticationManager(): AuthenticationManager
        + securityFilterChain(): SecurityFilterChain
    }
    
    SECURITY(JwtTokenProvider) {
        + generateToken(username): String
        + getUsernameFromToken(token): String
        + validateToken(token): boolean
    }
    
    SECURITY(JwtAuthenticationFilter) {
        + doFilterInternal(request, response, chain): void
    }
    
    SERVICE(CustomUserDetailsService) {
        + loadUserByUsername(username): UserDetails
    }
}

' Android Client Layer
package "Android Client" {
    ANDROID(LoginActivity) {
        + onCreate(savedInstanceState): void
        + handleLogin(): void
        + handleRegister(): void
    }
    
    ANDROID(MainActivity) {
        + navigationView: NavigationView
        + drawerLayout: DrawerLayout
        + setupNavigation(): void
    }
    
    ANDROID(ApiClient) {
        + retrofit: Retrofit
        + BASE_URL: String
        + create(): BinomeApiService
    }
    
    ANDROID(Project) {
        - id: String
        - title: String
        - description: String
    }
    
    package "Fragments" {
        ANDROID(ProfileFragment) {
            + onCreateView(): View
            + updateProfile(): void
        }
        
        ANDROID(MessagesFragment) {
            + adapter: ConversationsAdapter
            + loadConversations(): void
        }
        
        ANDROID(MatchesFragment) {
            + adapter: MatchesAdapter
            + loadMatches(): void
        }
    }
}

' Relationships
' Domain relationships
Profile "1" --> "1" User : belongs to
Message "*" --> "1" User : sender
Message "*" --> "1" User : recipient

' Service-Repository relationships
AuthenticationService --> UserRepository : uses
ProfileService --> ProfileRepository : uses
ProfileService --> UserRepository : uses
MessageService --> MessageRepository : uses
MessageService --> UserRepository : uses
MatchService --> ProfileRepository : uses
MatchService --> UserRepository : uses

' Controller-Service relationships
AuthController --> AuthenticationService : uses
ProfileController --> ProfileService : uses
MessageController --> MessageService : uses
MatchController --> MatchService : uses

' Security relationships
AuthenticationService --> JwtTokenProvider : uses
CustomUserDetailsService --> UserRepository : uses
JwtAuthenticationFilter --> JwtTokenProvider : uses

' Android Client relationships
LoginActivity --> ApiClient : uses
MainActivity --> ProfileFragment : contains
MainActivity --> MessagesFragment : contains
MainActivity --> MatchesFragment : contains

@enduml